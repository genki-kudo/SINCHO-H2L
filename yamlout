#!/usr/bin/env python

from subprocess import run
import os
import yaml
import sys
import numpy as np
import pandas as pd
import argparse
import datetime
from script_sincho.exec import *
from script_sincho.basic.basic_func import logo
from collections import OrderedDict

bash=lambda x:run(x,shell=True)

if __name__ == '__main__':
    ###input args###
    conditions = str(sys.argv[1]) # condition.yaml
    in_dir = str(sys.argv[2]) # Tsukuba_workflow/P2C_SINCHO/ out/yyyymmdd/sincho_out/
    out_dir = str(sys.argv[3]) # out/yyyymmdd/sincho_out/

    for i in range(2,4):
        if not os.path.exists(str(sys.argv[i])):
            os.makedirs(str(sys.argv[i]))

    ###load and preparation###
    with open(conditions,'r')as f:
        setting = yaml.safe_load(f)
    nums = setting['edit_trajectory']['necessary-snaps']
    outdir = setting['edit_trajectory']['output_dir']


    for i in range(nums+1):
        if not os.path.exists(out_dir+"trajectory_"+str(i).zfill(3)+"/"):
            os.makedirs(out_dir+"trajectory_"+str(i).zfill(3)+"/")
        for k in ["prot_","lig_"]:
            lower_file = "/trajectory_"+str(i).zfill(3)+"/"+k+str(i).zfill(3)+".pdb"
            bash("cp "+in_dir+lower_file+" "+out_dir+lower_file)
    
        
        yml = {}
        summary = {}
        flag = 0
        rank_index = 0
        for j in open(in_dir+"trajectory_"+str(i).zfill(3)+"/sincho.log"):
            if "##### RESULTS #####" in j:
                flag+=1
            if flag ==1 and "#" not in j:
                property = {}
                property["atom_num"]=j.split()[0]
                property["mw"]=float(j.split()[2])
                ## will be updated
                property["logp"]=3.0
                property["acceptor"]=2
                property["donor"]=1
                ## will be updated
                rank_index +=1
                summary["rank"+str(rank_index).zfill(3)]=property
            
        yml['SINCHO_result']=summary
        with open(out_dir+"trajectory_"+str(i).zfill(3)+"/sincho_result.yaml","a")as y:
                    yaml.dump(yml, y, encoding='utf-8', allow_unicode=True)

        
        
        

